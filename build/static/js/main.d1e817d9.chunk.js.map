{"version":3,"sources":["assets/logo.png","pages/ForgotPassword/index.jsx","routes/history.js","routes/index.js","reducers/index.js","sagas/index.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ForgotPassword","token","useParams","console","log","className","src","logo","alt","onSubmit","e","a","async","preventDefault","confirmPassword","target","value","password","axios","patch","headers","name","type","placeholder","history","createBrowserHistory","Router","path","component","exact","combineReducers","sagas","all","fork","routinePromiseWatcherSaga","error","sagaMiddleware","createSagaMiddleware","middlewares","logger","routerMiddleware","store","createStore","connectRouter","reducers","applyMiddleware","run","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,kQCmD5BC,G,MA3CQ,WAAO,IAElBC,EAAUC,cAAVD,MACRE,QAAQC,IAAIH,GAaZ,OACI,oCACI,yBAAKI,UAAU,YACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,OAAOC,IAAKC,IAAMC,IAAI,oBAErC,mDACA,gEACA,0BAAMC,SAnBD,SAAOC,GAAP,iBAAAC,EAAAC,OAAA,uDACjBF,EAAEG,iBACIC,EAAkBJ,EAAEK,OAAF,gBAA4BC,MAC9CC,EAAWP,EAAEK,OAAF,SAAqBC,MAHrB,WAAAL,EAAA,MAMXO,IAAMC,MAAM,uDAAuD,CAACF,WAAUH,mBAAkB,CAAEM,QAAS,CAC7G,eAAenB,MAPF,uCAoBD,2BACAoB,KAAK,kBACDC,KAAK,WACLC,YAAY,0BAEhB,2BACAF,KAAK,WACDC,KAAK,WACLC,YAAY,4BAEhB,2BAAOD,KAAK,SAASN,MAAM,oB,OCvCpCQ,EAFCC,cCeDC,EAVA,kBACb,yBAAKrB,UAAU,mBACb,kBAAC,IAAD,CAAemB,QAASA,GACtB,kBAAC,IAAD,CAAOG,KAAK,yBAAyBC,UAAW5B,EAAgB6B,OAAK,IACrE,kBAAC,IAAD,CAAOF,KAAK,IAAIC,UAAW5B,EAAgB6B,OAAK,IAChD,kBAAC,IAAD,S,iDCTSC,cAAgB,I,2BCCNC,GAAV,SAAUA,IAAV,iEAEX,OAFW,kBAELC,YAAI,CACRC,YAAKC,OAHI,sDAMX/B,QAAQgC,MAAR,MANW,oDCKf,IAAMC,EAAiBC,cAEjBC,EAAc,CAACF,EAAgBG,IAAQC,YAAiBhB,IAExDiB,EAAQC,YAAYC,YAAcnB,EAAdmB,CAAuBC,GAAWC,IAAe,WAAf,EAAmBP,IAE/EF,EAAeU,IAAIf,GAEJU,Q,MCAAM,MAVf,WACE,OACE,yBAAK1C,UAAU,OACb,kBAAC,IAAD,CAAUoC,MAAOA,GACf,kBAAC,EAAD,S,MCCYO,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d1e817d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.720671aa.png\";","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport logo from '../../assets/logo.png'\nimport axios from 'axios'\n\n\nimport './styles.css'\n\nconst ForgotPassword = () => {\n\n    const { token } = useParams()\n    console.log(token)\n\n    const handleSubmit = async (e) =>{\n        e.preventDefault()\n        const confirmPassword = e.target['confirmPassword'].value\n        const password = e.target['password'].value\n\n\n        await axios.patch('https://e2f1d099b3b7.ngrok.io/account/forgotpassword',{password, confirmPassword}, { headers: { \n            'x-user-token':token\n        }} )\n    }\n\n    return (\n        <>\n            <div className=\"elelment\">\n                <div className=\"element-main\">\n                    <img className=\"logo\" src={logo} alt=\"BeeHealthy logo\" />\n\n                    <h1>Redefinir sua senha</h1>\n                    <p>Informe e confirme sua nova senha</p>\n                    <form onSubmit={handleSubmit}>\n                        <input\n                        name='confirmPassword'\n                            type=\"password\"\n                            placeholder=\"Digite sua nova senha\"\n                        />\n                        <input\n                        name='password'\n                            type=\"password\"\n                            placeholder=\"Confirme sua nova senha\"\n                        />\n                        <input type=\"submit\" value=\"Redefinir\" />\n                    </form>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default ForgotPassword","import { createBrowserHistory } from 'history'\n\nconst history = createBrowserHistory()\n\nexport default history\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\n\nimport ForgotPassword from '../pages/ForgotPassword'\n\nimport history from './history'\n\nconst Router = () => (\n  <div className=\"container-fluid\">\n    <BrowserRouter history={history}>\n      <Route path=\"/forgotpassword/:token\" component={ForgotPassword} exact />\n      <Route path=\"/\" component={ForgotPassword} exact />\n      <Switch />\n    </BrowserRouter>\n  </div>\n)\n\nexport default Router\n","import { combineReducers } from 'redux'\n\n\nexport default combineReducers({\n})\n","import { routinePromiseWatcherSaga } from 'redux-saga-routines'\nimport { all, fork } from 'redux-saga/effects'\n\n\nexport default function* sagas() {\n  try {\n    yield all([\n      fork(routinePromiseWatcherSaga),\n    ])\n  } catch (error) {\n    console.error(error)\n  }\n}\n","import { routerMiddleware, connectRouter } from 'connected-react-router'\nimport { createStore, applyMiddleware } from 'redux'\nimport logger from 'redux-logger'\nimport createSagaMiddleware from 'redux-saga'\n\nimport reducers from '../reducers'\nimport history from '../routes/history'\nimport sagas from '../sagas'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst middlewares = [sagaMiddleware, logger, routerMiddleware(history)]\n\nconst store = createStore(connectRouter(history)(reducers), applyMiddleware(...middlewares))\n\nsagaMiddleware.run(sagas)\n\nexport default store\n","import React from 'react'\nimport { Provider } from 'react-redux'\n\nimport Router from './routes'\nimport store from './store'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router />\n      </Provider>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}